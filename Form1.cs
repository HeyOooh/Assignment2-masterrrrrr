using Assignment.Enum;
using Assignment_2.AbstractClasses;
using Assignment_2.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;

namespace Assignment_2._0
{

    /// <summary>
    /// GUI class to handle the GUI events
    /// </summary>
    public partial class GUI : Form
    {

        // The image the user will choose for an estate
        private Bitmap image = null;

        // Handler for the estates, contains a ArrayList for the estates and a HashSet with Ids for quick lookup
        private EstateManager estateManager;

        private bool saved = false;
        private string fileName;

        /// <summary>
        /// Constructor to the components
        /// </summary>
        public GUI()
        {
            InitializeComponent();

            btnSaveChanges.Enabled = false;
            estateManager = new EstateManager(listBox1);
            comboBoxCountry.DataSource = Countries.GetValues(typeof(Countries));
            comboBoxLegalForm.DataSource = LegalForms.GetValues(typeof(LegalForms));
            comboBoxCategory.DataSource = Category.GetValues(typeof(Category));
            comboBoxLegalForm.DataSource = LegalForms.GetValues(typeof(LegalForms));

            lblDynamicTxt1.Text = "---------";
            btnChangeEstate.BackColor = Color.FromArgb(140, 135, 222);
            btnCreateEstate.BackColor = Color.FromArgb(140, 135, 222);
            btnChooseImage.BackColor = Color.FromArgb(140, 135, 222);
            btnSaveChanges.BackColor = Color.FromArgb(168, 165, 209);
            btnDeleteAll.BackColor = Color.FromArgb(140, 135, 222);
            btnDelete.BackColor = Color.FromArgb(140, 135, 222);
            btnChangeEstate.BackColor = Color.FromArgb(140, 135, 222);
            btnGenerateEstates.BackColor = Color.FromArgb(140, 135, 222);
        }


        #region Autogenerated non used methods

        private void label11_Click(object sender, EventArgs e)
        {

        }

        private void label15_Click(object sender, EventArgs e)
        {

        }

        private void label17_Click(object sender, EventArgs e)
        {

        }

        private void comboBoxCountry_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void comboBoxLegalForm_SelectedIndexChanged(object sender, EventArgs e)
        {
        }

        private void lblSearchEstates_Click(object sender, EventArgs e)
        {

        }

        private void textBox6_TextChanged(object sender, EventArgs e)
        {
        }

        private void menuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void comboBox5_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        #endregion


        /// <summary>
        /// Method to choose an image with a file dialog
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnChooseImage_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            if (openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                image = new Bitmap(openFileDialog.FileName);
                pictureBoxImage.Image = image;
            }
        }


        /// <summary>
        /// Creates an estate with the given data
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCreateEstate_Click(object sender, EventArgs e)
        {
            createEstate();
        }

        private void createEstate()
        {

            // Gets all the value from the GUI to create an Estate object
            LegalForms legalForm = (LegalForms)comboBoxLegalForm.SelectedItem;
            Countries country = (Countries)comboBoxCountry.SelectedItem;
            string city = textBoxCity.Text;
            string zipCode = textBoxZipCode.Text;
            string street = textBoxStreet.Text;
            Category category = (Category)comboBoxCategory.SelectedItem;
            var type = comboBoxType.SelectedItem;
            string text = textBox6.Text;
            TypeAll typeAll = (TypeAll)comboBoxType.SelectedItem;
            bool isModifyingEstate = false;
            string id = textId.Text;

            // Id must be unique and in a valid format and all the fields int the GUI must be filled´, else do not create an Estate
            if (!isIdValid(id) || !uniqueId(id) || !estateManager.allFieldsFilled(city, zipCode, street, text))
            {
                return;
            }

            // Creates an address from the given address data
            Address address = new Address(street, zipCode, city, country);
            Estate estate = null;

            // Creates an estate in the correct type, depending on what type the user has chosen
            switch (type)
            {
                case TypeCom.Shop:
                    estate = new Shop(id, text, legalForm, image, address, category, typeAll);
                    break;
                case TypeCom.Warehouse:
                    estate = new Warehouse(id, text, legalForm, image, address, category, typeAll);
                    break;
                case TypeRes.Apartment:
                    estate = new Apartment(id, text, legalForm, image, address, category, typeAll);
                    break;
                case TypeRes.House:
                    estate = new House(id, text, legalForm, image, address, category, typeAll);
                    break;
                case TypeRes.Townhouse:
                    estate = new Townhouse(id, text, legalForm, image, address, category, typeAll);
                    break;
                case TypeRes.Villa:
                    estate = new Villa(id, text, legalForm, image, address, category, typeAll);
                    break;
                default:
                    break;
            }

            estateManager.Add(estate);
        }


        /// <summary>
        /// Helper method to set the type-combobox with the correct Enum values
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxCategory.SelectedItem.Equals(Category.Residential))
            {
                comboBoxType.DataSource = TypeRes.GetValues(typeof(TypeRes));
            }
            else
            {
                comboBoxType.DataSource = TypeCom.GetValues(typeof(TypeCom));
            }
        }


        /// <summary>
        /// Helper method to set the label for the unique attribute with the correct string 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void comboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (comboBoxType.SelectedItem)
            {
                case TypeRes.Villa:
                    lblDynamicTxt1.Text = "Lawn size (m2):";
                    break;

                case TypeRes.Apartment:
                    lblDynamicTxt1.Text = "Floor number:";
                    break;

                case TypeRes.Townhouse:
                    lblDynamicTxt1.Text = "Height(meters):";
                    break;

                case TypeRes.House:
                    lblDynamicTxt1.Text = "Color:";
                    break;

                case TypeCom.Shop:
                    lblDynamicTxt1.Text = "Type of Shop:";
                    break;

                case TypeCom.Warehouse:
                    lblDynamicTxt1.Text = "Capacity (m3):";
                    break;

                default:
                    MessageBox.Show("Something went wrong, this type is not in the enum list");
                    break;
            }
        }


        /// <summary>
        /// Deletes the highlighted estate
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDelete_Click(object sender, EventArgs e)
        {
            int indexToDelete = listBox1.SelectedIndex;
            estateManager.DeleteAt(indexToDelete);
        }


        /// <summary>
        /// Deletes all the estates in the estates ArrayList.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDeleteAll_Click(object sender, EventArgs e)
        {
            estateManager.DeleteAll();
        }


        /// <summary>
        /// Generates nine estates to make it easier for the user to test the search function.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGenerateEstates_Click(object sender, EventArgs e)
        {
            Estate[] estates = new Estate[9];

            Address address1 = new Address("Street1", "24010", "Lund", Countries.Sverige);
            Address address2 = new Address("Street2", "22224", "Malmö", Countries.Sverige);
            Address address3 = new Address("Street3", "08122", "Ystad", Countries.Sverige);

            estates[0] = new Shop("0001", "Food", LegalForms.Rental, null, address1, Category.Commercial, TypeAll.Shop);
            estates[1] = new Shop("0002", "Paint", LegalForms.Rental, null, address2, Category.Commercial, TypeAll.Shop);
            estates[2] = new Shop("0003", "Pizza", LegalForms.Ownership, null, address3, Category.Commercial, TypeAll.Shop);

            estates[3] = new Warehouse("0004", "1000", LegalForms.Ownership, null, address1, Category.Commercial, TypeAll.Warehouse);
            estates[4] = new Warehouse("0005", "2000", LegalForms.Rental, null, address1, Category.Commercial, TypeAll.Warehouse);
            estates[5] = new Warehouse("0006", "3000", LegalForms.Ownership, null, address2, Category.Commercial, TypeAll.Warehouse);

            estates[6] = new Villa("0007", "100", LegalForms.Rental, null, address2, Category.Residential, TypeAll.Villa);
            estates[7] = new Villa("0008", "200", LegalForms.Ownership, null, address3, Category.Residential, TypeAll.Villa);
            estates[8] = new Villa("0009", "300", LegalForms.Rental, null, address3, Category.Residential, TypeAll.Villa);


            estateManager.genereateEstates(estates);
        }


        /// <summary>
        /// If the user clicks the save changes button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveChanges_Click(object sender, EventArgs e)
        {
            if (!estateManager.allFieldsFilled(textBoxCity.Text, textBoxZipCode.Text, textBoxStreet.Text, textBox6.Text))
            {
                return;
            }

            btnSaveChanges.Enabled = false;
            btnChangeEstate.Enabled = true;
            btnCreateEstate.Enabled = true;
            textId.ReadOnly = false;
            btnDeleteAll.Enabled = true;
            btnGenerateEstates.Enabled = true;
            btnDelete.Enabled = true;

            btnSaveChanges.BackColor = Color.FromArgb(168, 165, 209);
            btnChangeEstate.BackColor = Color.FromArgb(140, 135, 222);
            btnCreateEstate.BackColor = Color.FromArgb(140, 135, 222);

            estateManager.DeleteAt(listBox1.SelectedIndex);
            createEstate();
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!saved)
            {
                saveAsToolStripMenuItem_Click(sender, e);
            }
            
            estateManager.BinarySerialize(fileName);
        }
         
        private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {

            using (SaveFileDialog sfd = new SaveFileDialog() { Filter = "Dat files (.dat)|.dat|All files (.)|*.*", ValidateNames = true })
            {

                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    string fileName = sfd.FileName;

                    estateManager.BinarySerialize(fileName);
                }
            }
            saved = true;
        }


        /// <summary>
        /// If the user presses the CHANGE ESTATE button
        /// Updates all the textFields, comboBoxes with the correct data
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnChangeEstate_Click(object sender, EventArgs e)
        {

            int indexToChange = listBox1.SelectedIndex;

            if (indexToChange != -1)
            {
                UpdateEstatesFields(indexToChange);
                comboBox4_SelectedIndexChanged(sender, e);

                // Enabling and disabling buttons to hinder the user to press buttons that should not be pressed
                textId.ReadOnly = true;
                btnCreateEstate.Enabled = false;
                btnChangeEstate.Enabled = false;
                btnSaveChanges.Enabled = true;
                btnDeleteAll.Enabled = false;
                btnGenerateEstates.Enabled = false;
                btnDelete.Enabled = false;
                btnSaveChanges.BackColor = Color.FromArgb(140, 135, 222);
                btnCreateEstate.BackColor = Color.FromArgb(168, 165, 209);
                btnChangeEstate.BackColor = Color.FromArgb(168, 165, 209);


                tabControl.SelectedIndex = 0;
            }

            else
            {
                MessageBox.Show("You have not chosen an item in the ListBox, \n" +
                    "please choose an item to change.");
            }
        }


        /// <summary>
        /// Updates the text fields when the user presses CHANGE ESTATE from the given id
        /// </summary>
        /// <param name="comboBoxLegalForm"></param>
        /// <param name="comboBoxCountry"></param>
        /// <param name="comboBoxCategory"></param>
        /// <param name="comboBoxType"></param>
        /// <param name="textchange"></param>
        /// <param name="textcity"></param>
        /// <param name="textzip"></param>
        /// <param name="textStreet"></param>
        /// <param name="textUnique"></param>
        /// <param name="changeText"></param>
        /// <param name="textId"></param>
        /// <param name="pictureBoxImage"></param>
        public void UpdateEstatesFields(int index)
        {
            Estate e = estateManager.GetAt(index);

            textId.Text = e.Id;
            comboBoxLegalForm.SelectedItem = e.LegalForm;
            comboBoxCountry.SelectedItem = e.Address.Country;
            textBoxCity.Text = e.Address.City.ToString();
            textBoxZipCode.Text = e.Address.ZIPCode.ToString();
            textBoxStreet.Text = e.Address.Street.ToString();
            comboBoxCategory.SelectedItem = e.Category;
            comboBoxType.SelectedItem = e.getType();
            textBox6.Text = e.UniqueAttribute;

            if (e.Image != null)
            {
                pictureBoxImage.Image = e.Image;
            }
            else
            {
                pictureBoxImage.Image = null;
            }
        }


        /// <summary>
        /// Checks if the given id is unique
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool uniqueId(string id)
        {
            int index = 0;

            // Loop to check that the given Id is unique
            while (estateManager.CheckIndex(index))
            {
                Estate e = estateManager.GetAt(index);
                if (e.Id == id)
                {
                    MessageBox.Show($"The id: {id} is not unique, please chooose anonther Id. \n" +
                        $" To see the Id´s int he list, browse the Delete tab.");
                    return false;
                }

                ++index;
            }

            return true;
        }


        /// <summary>
        /// Validate that the Id follows the preapproved format, four numbers
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public bool isIdValid(string id)
        {
            int correctIdLenght = 4;
            if (id.Length != correctIdLenght)
            {
                MessageBox.Show("The Id you chose is not a valid Id, it should consist of four numbers, eg 1234");
                return false;
            }

            if (!id.All(char.IsDigit))
            {
                MessageBox.Show("The id must consist of all numbers!");
                return false;
            }

            return true;
        }



        /// <summary>
        /// Metod called when pressing the open button in the file menu, 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// VAD HÄNDER OM MAN VÄLJER EN FIL SOM INTE GÅR ATT DESERIALISERA?
        private void openCtrlOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog() { Filter = "Dat files (.dat)|.dat|All files (.)|*.*", ValidateNames = true })
            {
                if (ofd.ShowDialog() == DialogResult.OK)
                {

                    
                    string filename = ofd.FileName;
                    estateManager.BinaryDeSerialize(filename);
                }
            }
        }

        private void newCtrlNToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string msg = "Press OK if you want to proceed without saving your data";
            string msg2 = "Data not saved";

            //nollställa applikationen
            if (!saved)
            {
                MessageBoxButtons buttons = MessageBoxButtons.OKCancel;
                DialogResult res = MessageBox.Show(msg, msg2, buttons);
                if (res == DialogResult.OK)
                {
                    estateManager.DeleteAll();
                    estateManager.ClearFields(comboBoxLegalForm, comboBoxCountry, comboBoxCategory, comboBoxType, textBoxCity, textBoxZipCode, textBoxStreet, textBox6, textId, pictureBoxImage);

                }

            }
        }

        private void fileToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void exportToXMLFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            using (SaveFileDialog sfd = new SaveFileDialog() { Filter = "XML files (.xml)|.xml|All files (.)|*.*", ValidateNames = true })
            {

                if (sfd.ShowDialog() == DialogResult.OK)
                {
                    fileName = sfd.FileName;
                    estateManager.XMLSerialize(fileName);
                }
            }
        }
    }
}